<?xml version="1.0"?>
<root main_tree_to_execute="MainTree">
    <!-- ////////// -->
    <BehaviorTree ID="MainTree">
        <Sequence>
            <Action ID="DetectorAUVService" objects="cover" service_name="yellow_cover_4"/>
            <SetBlackboard output_key="/auv4/nav/odom_ned" value="pose_topic_name"/>
            <ReactiveFallback>
                <Condition ID="YellowCoverDetected"/>
                <Repeat num_cycles="10">
                    <Sequence>
                        <Sequence>
                            <RetryUntilSuccesful num_attempts="-1">
                                <Action ID="UpdatePose" output_key="odom_pose" queue_size="" topic_name="/auv4/nav/odom_ned"/>
                            </RetryUntilSuccesful>
                            <Action ID="ConvertOdomToPose" odom_pose="{odom_pose}" pose="{pose}"/>
                            <Action ID="MoveForwardDemo" goal="{goal}" pose="{pose}"/>
                            <ReactiveSequence>
                                <RetryUntilSuccesful num_attempts="-1">
                                    <Action ID="UpdatePose" output_key="odom_pose" queue_size="" topic_name="/auv4/nav/odom_ned"/>
                                </RetryUntilSuccesful>
                                <Action ID="ConvertOdomToPose" odom_pose="{odom_pose}" pose="{pose}"/>
                                <ReactiveFallback>
                                    <Condition ID="IsDistanceTraveled" distance="5" pose="{pose}"/>
                                    <Action ID="NavigateToPose" goal="{goal}" server_name="/auv4/LocomotionServer" server_timeout=""/>
                                </ReactiveFallback>
                            </ReactiveSequence>
                        </Sequence>
                        <Sequence>
                            <RetryUntilSuccesful num_attempts="-1">
                                <Action ID="UpdatePose" output_key="odom_pose" queue_size="" topic_name="/auv4/nav/odom_ned"/>
                            </RetryUntilSuccesful>
                            <Action ID="ConvertOdomToPose" odom_pose="{odom_pose}" pose="{pose}"/>
                            <Action ID="SetRelativeGoal" depth_lock="5" goal="turn" pose="0" relative_goal="0" yaw_lock="30"/>
                            <ReactiveSequence>
                                <RetryUntilSuccesful num_attempts="-1">
                                    <Action ID="UpdatePose" output_key="odom_ned" queue_size="" topic_name="/auv4/nav/odom_ned"/>
                                </RetryUntilSuccesful>
                                <Action ID="ConvertOdomToPose" odom_pose="{odom_space}" pose="{pose}"/>
                                <ReactiveFallback>
                                    <Condition ID="IsGoalReached" goal="{turn}" last_pose_update="" pose="{pose}"/>
                                    <Action ID="NavigateToPose" goal="{goal}" server_name="/auv4/LocomotionServer" server_timeout=""/>
                                </ReactiveFallback>
                            </ReactiveSequence>
                        </Sequence>
                    </Sequence>
                </Repeat>
            </ReactiveFallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="ControllerService">
            <input_port name="enable">True to enable controls, false to disable controls</input_port>
            <input_port name="service_name">Name of service</input_port>
        </Action>
        <Action ID="ConvertOdomToPose">
            <input_port name="odom_pose">Pose as a nav_msgs::Odometry message</input_port>
            <output_port name="pose">Pose as a geometry_msgs::PoseStamped message</output_port>
        </Action>
        <Action ID="DetectorAUVService">
            <input_port name="objects">Names of objects to be detected</input_port>
            <input_port name="service_name">Name of service</input_port>
        </Action>
        <Condition ID="IsDistanceTraveled">
            <input_port name="distance">Distance to check if passed</input_port>
            <input_port name="pose">Latest robot pose</input_port>
        </Condition>
        <Condition ID="IsGoalReached">
            <input_port name="goal">Destination</input_port>
            <input_port name="last_pose_update">Timestamp of latest pose update</input_port>
            <input_port name="pose">Latest robot pose</input_port>
        </Condition>
        <Condition ID="IsGoalUpdated"/>
        <Condition ID="IsPoseUpdated"/>
        <Condition ID="IsTimeExpired">
            <input_port name="seconds">Time to check if expired</input_port>
        </Condition>
        <Action ID="MoveForwardDemo">
            <output_port name="goal">Goal</output_port>
            <input_port name="pose">Pose</input_port>
        </Action>
        <Action ID="NavigateToPose">
            <input_port name="goal">Goal</input_port>
            <input_port name="server_name">Action server name</input_port>
            <input_port name="server_timeout">Timeout for action server to respond</input_port>
        </Action>
        <Action ID="SetBlackboardString">
            <input_port name="key">Key to set string to</input_port>
            <input_port name="value">String value</input_port>
        </Action>
        <Action ID="SetRelativeGoal">
            <input_port name="depth_lock">Depth to lock to. If specified, relative depth in pose will be ignored.</input_port>
            <output_port name="goal">Port to set goal to</output_port>
            <input_port name="pose">Current pose</input_port>
            <input_port name="relative_goal">Relative pose goal (refer to bt conversions for specification)</input_port>
            <input_port name="yaw_lock">Yaw to lock to. If specified, relative yaw in pose will be ignored.</input_port>
        </Action>
        <Action ID="UpdateDetectedObjects">
            <input_port name="output_key">Name of output port to write to</input_port>
            <input_port name="queue_size">Topic queue size </input_port>
            <input_port name="topic_name">Topic name</input_port>
        </Action>
        <Action ID="UpdatePose">
            <input_port name="output_key">Name of output port to write to</input_port>
            <input_port name="queue_size">Topic queue size </input_port>
            <input_port name="topic_name">Topic name</input_port>
        </Action>
        <Condition ID="YellowCoverDetected"/>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

